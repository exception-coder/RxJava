package cn.exceptioncode.two.two.two;import io.reactivex.Observable;import io.reactivex.ObservableEmitter;import io.reactivex.ObservableOnSubscribe;import io.reactivex.functions.Consumer;import org.junit.Test;public class ObservableTest {    @Test    public void objectObservableTest1() {        Observable<Object> objectObservable = Observable.create(                new ObservableOnSubscribe() {                    @Override                    public void subscribe(ObservableEmitter emitter) throws Exception {                        // process element                        emitter.onNext("process element: " + Math.random() * 100);                        // complete                        emitter.onComplete();                    }                }//                emitter -> {                // process element//                    emitter.onNext("process element: " + Math.random() * 100);                // complete//                    emitter.onComplete();//                }        );        objectObservable.subscribe(                new Consumer() {                    @Override                    public void accept(Object consumer) throws Exception {                        System.out.println("consumer element: " + consumer);                    }                }//                consumer -> {//                    System.out.println("consumer element: " + consumer);//                }        );        objectObservable.subscribe(consumer -> {            System.out.println("consumer element: " + consumer);        });    }    @Test    public void deferTest(){        String[] monthArray = {                "Jan",                "Feb",                "Nar",                "Apl",                "May",                "Jun",                "July",                "Aug",                "Sept",                "Oct",                "Nov",                "Dec"        };        Observable.defer(()->{           return Observable.fromArray(monthArray);        }).subscribe(System.out::println,Throwable::printStackTrace,()->{            System.out.println("Emission completed");        });    }    @Test    public void emptyTest(){        Observable<Object> empty = Observable.empty();        empty.subscribe(System.out::println,Throwable::printStackTrace,()->System.out.println("I am Done!! Completed normally"));    }    @Test    public void errorTest(){        Observable<String> observable = Observable.error(new Exception("We got an Exception"));        observable.subscribe(System.out::println,System.out::println,()-> System.out.println("I am Done!! Completed normally"));    }    @Test    public void ranggeTest(){        log("Range_test Before");        Observable.range(5,3).subscribe(ObservableTest::log);        log("Range_test After");    }    @Test    public void justTest(){        log("Just_test Before");        Observable.just("Jan","Feb","Mar","Apl","May","Jun").subscribe(ObservableTest::log);        log("Just_test After");    }    private static void log(Object msg){        System.out.println(Thread.currentThread().getName()+": "+msg);    }}